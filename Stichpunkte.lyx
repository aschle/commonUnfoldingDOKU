#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Common Unfolding
\end_layout

\begin_layout Author
Alexa Schlegel (aschle@inf.fu-berlin.de)
\begin_inset Newline newline
\end_inset

Friedrich Keinhorst (fkeinhorst@gmail.com )
\begin_inset Newline newline
\end_inset

Henry Dettmer (henrydettmer@gmail.com )
\end_layout

\begin_layout SubTitle
Softwareprojek: Anwendung von Algorithmen
\begin_inset Newline newline
\end_inset

Sommersemester 2011
\begin_inset Newline newline
\end_inset

Professor Rote
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
today}
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Gegenstand des Projektes, Zielstellung, Umsetzung, Ergebnis, Am Ende schreiben.
\end_layout

\begin_layout Part*
Einleitung
\end_layout

\begin_layout Standard
Das Softwareprojekt 
\begin_inset Quotes eld
\end_inset

Common Unfolding
\begin_inset Quotes erd
\end_inset

 entstand im Sommersemester 2011 im Rahmen der Veranstaltung 
\begin_inset Quotes eld
\end_inset

Softwareprojekt: Anwendungen von Algorithmen
\begin_inset Quotes erd
\end_inset

 unter Leitung von Herrn Prof.
 Dr.
 RoteHerrn Prof.
 Dr.
 Rote.
 Es entstand ein Programm, mit dessen Hilfe, auf zeichnerischem Wege Polygone
 gefunden werden können, aus denen zwei verschieden Schachteln gefaltet
 werden können.
 Im Folgenden wird die genaue Problemnstellung näher erläutert.
\end_layout

\begin_layout Section
Problemstellung 
\end_layout

\begin_layout Standard
Grundsätzlich geht es um das Falten von orthogonalen Polygonen zu Quadern.
 Unter orthogonalen Polygonen versteht man Polygone, die ausschließlich
 Innenwinkel mit 90° oder 270° besitzen.
 Es existieren orthogonale Polygone als Grundfläche, welche, auf verschieden
 Art gefaltet, in zwei verschieden dimensionierten Quadern resultieren.
 Dieses Polygon wird als 
\begin_inset Quotes eld
\end_inset

common unfolding
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "commonUnfold"

\end_inset

 der Quader bezeichnet.
 In der Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Common-Unfolding"

\end_inset

 ist ein Beispiel einer Grundfläche gezeigt, aus welcher zwei Schachteln
 in den Dimensionen 
\begin_inset Formula $1\times2\times3$
\end_inset

 und 
\begin_inset Formula $1\times1\times5$
\end_inset

 gefaltet werden können.
 Da beide Schachteln aus dem selben Polygon gefaltet wurden, haben sie identisch
e Oberflächeninhalte.
 Unsere Aufgabe war es, ein Programm zu entwickeln, welches eine zeichnerische
 Lösung bietet, um solche Grundflächen zu finden.
 Dabei wird die Idee des 
\begin_inset Quotes eld
\end_inset

Simultanen Zeichnens
\begin_inset Quotes erd
\end_inset

 verwendet.
 Unter Simultanem Zeichnen versteht man das gleichzeitige Zeichnen auf mehreren
 Flächen.
 Ausgangspunkt sind zwei (oder mehr) Quader mit verschiedenen Kantenlängen
 aber gleichem Flächeninhalt.
 Für diese Quader soll nun das Common-Unfold gefunden werden.
 Auf den Oberflächen der Quader, wird gleichzeitig/simultan gezeichnet.
 Wir erhalten die Lösung, wenn alle gegeben Quaderoberflächen komplett ausgemalt
 sind.
 Die Stellen an denen gefaltet werden soll, muss selbständig gefunden werden.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename commonUnfold_beispiel1.eps
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Common Unfolding
\begin_inset CommandInset label
LatexCommand label
name "fig:Common-Unfolding"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename simulatnes zeichnen.eps
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simpultanes Zeichnen
\begin_inset CommandInset label
LatexCommand label
name "tab:Simpultanes-Zeichnen"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Ziele
\end_layout

\begin_layout Standard
Das Ziel dieses Projektes war es, ein Programm zu entwickeln, welches eine
 2D Grafische Benutzeroberfläche bietet, um solche 
\begin_inset Quotes eld
\end_inset

common unfolding
\begin_inset Quotes erd
\end_inset

-Polygone zu finden.
 Das Programm bietet eine Auswahl der Startquader und das eigentliche Zeichnen.
\end_layout

\begin_layout Chapter
Funktionale Anforderungen
\end_layout

\begin_layout Standard
ImFogenden werden wir die Funktionalen Anforderung an unser Programm erläutern.
 Diese waren zum Teil durch die Aufgabenstellung gegeben, ergaben sich aber
 auch während der Programmierarbeit.
\end_layout

\begin_layout Description
Optionale
\begin_inset space ~
\end_inset

Verknüpfung
\begin_inset space ~
\end_inset

von
\begin_inset space ~
\end_inset

Randstücken: Wird ein Gitternetz eines Quaders gezeichnet, so entstehen
 doppelte Linien, obwohl es dies Kanten nur einmal gibt.
 Hier galt es eine Regel zu finden um Ungenauigkeiten zu vermeiden.
\end_layout

\begin_layout Description
Unterstützung
\begin_inset space ~
\end_inset

der
\begin_inset space ~
\end_inset

Anfangszuordnung: Bevor mit dem Zeichnen begonnen wird, sollen die Startpunkte
 auf den einzelnen Schachteln ausgewählt werden können.
\end_layout

\begin_layout Description
Automatisierung
\begin_inset space ~
\end_inset

der
\begin_inset space ~
\end_inset

Verarbeitung
\begin_inset space ~
\end_inset

verschiedener
\begin_inset space ~
\end_inset

Schachteln: Es soll durch den Benutzer ausgewählt werden, welche Schachteln
 er bearbeten möchte.
\end_layout

\begin_layout Description
Automatisches
\begin_inset space ~
\end_inset

Auffüllen: Das ist ein wenig komplizierter, wird an einer Stelle etwas weggenomm
en, weil es zum Beispiel durch eine ander Fläche übermalt wurde, so sollen
 automatisch die Zwischenräume aufgefüllt werden.
\end_layout

\begin_layout Chapter
Frontend - User Interface - Bedienungsanleitung
\end_layout

\begin_layout Standard
Im Folgenden wir die Bedienung des Programmes erläuter.
 Das Projekt kann unter 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

https://dev.spline.de/svn/CommonUnfold/trunk/
\end_layout

\end_inset

 runtergeladen werden.
 Im Ordner 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

src
\end_layout

\end_inset

 sollte die Datei 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

common_unfolding_draw.py
\end_layout

\end_inset

 mit dem Befehl 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

python common_unfolding_draw.py
\end_layout

\end_inset

 gestartet werden.
 Im Folgenden wird bschreiben, wie man vorgeht um ein Common Unfold zu finden.
\end_layout

\begin_layout Section
Schachteln erzeugen
\end_layout

\begin_layout Standard
Startet man das Programm, so muss man als erstes Schachteln erzeugen, die
 Anzahl kann man frei wählen.
 Diese Schachtel sollten aus dem gefunden Common Unfold gefaltet werden
 können.
 Bei der Erzeugung kann zwischen 
\emph on
New By Surface
\emph default
 und 
\emph on
New By Dimension
\emph default
 gewählt werden.
\end_layout

\begin_layout Description
New
\begin_inset space ~
\end_inset

By
\begin_inset space ~
\end_inset

Surface: Hier gibt man den Oberflächeninhalt an und alle Schachteln die
 diesen Oberflächeninhalt haben werden erzeugt, wenn es mehr als eine gibt.
\end_layout

\begin_layout Description
New
\begin_inset space ~
\end_inset

By
\begin_inset space ~
\end_inset

Dimension: Hier gibt man die Breite, Höhe und Tiefe einer Schachtel an,
 alle weiteren, die in die gleiche Äquvalenzklasse fallen werden erzeugt.
\end_layout

\begin_layout Standard
Man muss mindestens zwei Schachteln auswählen, zusätzlich kann man die Rotation
 der Schachteln angeben, sie werden dabei um ihren Urspung rotiert.
\end_layout

\begin_layout Section
Zeichnenoberfläche
\end_layout

\begin_layout Standard
Wählt man Schachteln aus und Bestätigt mit OK, so gelangt man zum Zeichenbereich.
 Als erstes müssen die Startpunkte festgelegt werden, dies kann man klicken
 auf die entsprechende Stelle erreichen oder mit Eingeben der exakten Koordinate
n.
 Die Eingabe muss mit OK bestätigt werden.
\end_layout

\begin_layout Standard
Die Zeichenoberfläche besteht aus drei Bereichen (1,2,3,4).
\end_layout

\begin_layout Description
(1)
\begin_inset space ~
\end_inset

Zeichenbereich: In diesem Bereich wird gezeichnet, hier entsteht die neue
 Grundfläche aus der die links abgebildeten Schachteln gefaltet werden könne.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Zeichenbereich.eps
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Zeichenoberfläche
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Datei lade, speichern, exportieren
\end_layout

\begin_layout Standard
Tastenkürzel
\end_layout

\begin_layout Itemize
Beschreibung der Oberfläche, Aufbau des Fensters
\end_layout

\begin_deeper
\begin_layout Itemize
Wie bedient man das Programm?
\end_layout

\begin_deeper
\begin_layout Itemize
Wie geht man vor?
\end_layout

\end_deeper
\begin_layout Itemize
Tastenkürzel und so Sachen
\end_layout

\end_deeper
\begin_layout Chapter
Technische Umsetzung
\end_layout

\begin_layout Standard
allgemeines geplänkel
\end_layout

\begin_layout Standard
Wir haben eine Trennung von MVC-Pattern angestrebt.
 Trennun gvon GUI und Logik.
\end_layout

\begin_layout Section
Verwendete Technologien
\end_layout

\begin_layout Itemize
SystemvoraussetzungenCommon unfolding
\end_layout

\begin_layout Itemize
Welches Betreibssystem wird benötigt?
\end_layout

\begin_deeper
\begin_layout Itemize
Welche Abhängigkeiten sind zu beachten?
\end_layout

\begin_layout Itemize
Wie führe ich das Programm aus?
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Note Note
status open

\begin_layout Plain Layout
Welche genaue Versionen von python und tkinter verwendeten wir?
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Note Note
status open

\begin_layout Itemize
Entwicklungsplattform , Programmiert wurde in Python, für die grafische
 Oberfläche tkinter
\end_layout

\end_inset


\end_layout

\begin_layout Section
Frontend - User Interface
\end_layout

\begin_layout Standard
Screenschots, Bereiche erläutern, wie male ich was, vielleicht ein Beispiel
 zeigen, was man malen kann
\end_layout

\begin_layout Section
Backend - Softwarearchitektur
\end_layout

\begin_layout Standard
Stichpunkte: 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Technische Umsetzung der Features
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Itemize
Verwendete Datenstrukturen und Algorithmen
\end_layout

\begin_layout Itemize
Verwendete Klassen, Vererbungen
\end_layout

\begin_deeper
\begin_layout Itemize
UML Diagramme
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Subsection

\lang ngerman
Überblick
\end_layout

\begin_layout Standard

\lang ngerman
Alle Zeichenvorgänge gehen von einer Benutzereingabe auf der Hauptzeichenfläche
 aus, auch beim Zeichnen auf den Schachtel-Zeichenflächen wird ein entsprechende
s Ereignis auf der Hauptfläche ausgelöst, welches in der draw-Methode des
 DrawingCanvas-Objektes behandelt wird.
\end_layout

\begin_layout Standard

\lang ngerman
Von den x- und y-Koordinaten dieses Ereignisses ausgehend wird von jeder
 Schachtel-Zeichenfläche die Funktion prepare(x, y) aufgerufen.
\end_layout

\begin_layout Standard

\lang ngerman
In den Zeichenflächen werden die Koordinaten berechnet, die, beim aktuellen
 Zeichenvorgang, dem Punkt auf der Hauptfläche entsprechen.
 Zusätzlich wird angegeben ob dieser Punkt auf der Schachtel-Zeichenfläche
 bereits existiert.
 Falls es auf einer Fläche nicht möglich seien sollte entsprechende Koordinaten
 zu berechnen, wird der Zeichenvorgang abgebrochen.
\end_layout

\begin_layout Standard

\lang ngerman
Falls in den berechneten Schachtel-Koordinaten Konflikte aufgetreten sind,
 also Punkte auf den Schachtelflächen bereits vorhanden sind, und das Überschrei
ben aktiviert ist, werden die bereits vorhandenen Punkte und ihre entsprechenden
 Punkte auf den anderen Zeichenflächen gelöscht.
 Ein auf der Hauptzeichenfläche bereits vorhandener Punkt wird ebenso behandelt.
 Sollte Überschreiben nicht aktiviert sein muss der Zeichenvorgang bei vorhanden
en Konflikten abgebrochen werden.
\end_layout

\begin_layout Standard

\lang ngerman
Nachdem nun mögliche Konflikte behoben sind können alle berechneten Punkte
 gezeichnet werden.
\end_layout

\begin_layout Subsection

\lang ngerman
Berechnen der Schachtel-Koordinaten
\end_layout

\begin_layout Standard

\lang ngerman
In der Funktion prepare(x, y) der BoxCanvas-Objekte wird von den x-, y-Koordinat
en der Hauptzeichenfläche ausgehend die Koordinaten des entsprechenden Punktes
 der Schachtel-Zeichenfläche berechnet.
\end_layout

\begin_layout Standard

\lang ngerman
Ausgehend vom Startpunkt der Schachtelfläche wird eine Verschiebung der
 Koordinaten addiert.
 Falls z.
 B.
 der Startpunkt der Hauptfläche 
\begin_inset Formula $(100|100)$
\end_inset

 ist und der Startpunkt der Schachtelfläche 
\begin_inset Formula $(200|300)$
\end_inset

, so ergibt sich 
\begin_inset Formula $(x+100|y+200)$
\end_inset

.
\end_layout

\begin_layout Standard

\lang ngerman
Zu jeder Schachtelfläche gehört eine Liste traversed_edges, in der die im
 aktuellen Zeichenvorgang überquerten Kanten gespeichert werden.
 Nun wird nacheinander die traverse-Funktion der Kanten für die x-, y-Koordinate
n aufgerufen.
\end_layout

\begin_layout Standard

\lang ngerman
Nun muss festgestellt werden, ob der berechnete Punkt wiederum außerhalb
 der Schachtel liegt, ob also eine weitere Kante überquert wurde, oder ob
 der Punkt innerhalb der Schachtel liegt.
 Dazu werden Orientierungstest mit den Eckpunkten der beiden Rechtecke,
 die die Schachtelfläche bilden ausgeführt (Funktion is_inside(x, y)).
\end_layout

\begin_layout Standard

\lang ngerman
Falls der Punkt außerhalb liegt und im aktuellen Zeichenvorgang bereits
 ein Punkt gezeichnet wurde, also ein gültiger Referenzpunkt vorliegt, wird
 die zwischen den beiden Punkten liegende Kante festgestellt.
 Für diese Kante wird ebenfalls die traverse-Funktion aufgerufen, wodurch
 wir wiederum neue Koordinaten erhalten.
\end_layout

\begin_layout Standard

\lang ngerman
Falls kein Referenzpunkt vorhanden ist, kann kein gültiger Punkt berechnet
 werden.
\end_layout

\begin_layout Standard

\lang ngerman
Nun haben wir also gültige Koordinaten für einen auf der Schachtel liegenden
 Punkt und möglicherweise eine neu überquerte Kante (sollte der Punkt schließlic
h gezeichnet werden, wird diese Kante zur Liste der Überquerten hinzugefügt).
 Jetzt wird noch geprüft ob der berechnete Punkt bereits gezeichnet wurde.
 Diese Information wird zusammen mit den berechneten Koordinaten zurückgegeben.
\end_layout

\begin_layout Subsection

\lang ngerman
Automatisches Auffüllen
\end_layout

\begin_layout Standard

\lang ngerman
Falls auf einer Schachtelfläche ein Punkt gelöscht wird (z.
 B.
 aufgrund von Überschreibung), wird dieser Löschvorgang gespeichert.
 Nachdem der aktuelle Punkt gezeichnet wurde, werden die gelöschten Punkt
 überprüft.
 Falls ein Punkt tatsächlich gelöscht wurde, also kein neuer Punkt an der
 gleichen Stelle gezeichnet wurde, wird in der Funktion get_autofill geprüft,
 ob auf der entsprechenden Zeichenfläche in der näheren Umgebung bereits
 gezeichnet wurde.
 Die Anzahl der überprüften Pixel ist abhängig von der eingestellten Zeichenbrei
te.
\end_layout

\begin_layout Standard

\lang ngerman
Falls ein entsprechender Punkt gefunden wird, wird von diesem aus 
\begin_inset Quotes eld
\end_inset

aufgefüllt
\begin_inset Quotes erd
\end_inset

.
 Der gelöschte Punkt wird also so gezeichnet, als wäre er im gleichen Zeichenvor
gang entstanden wie der bereits vorhandene Punkt.
 
\end_layout

\begin_layout Subsection
startpunkte (startpoint_dialog, startpoint_main)
\end_layout

\begin_layout Itemize
Startpunkte auf Boxen im startpoint_dialog mit Mausklick oder in Spinnbox,
 box_canvas.offset wird angepasst Startpunkte auf drawing_canvas mit mausklick
 auf Zeichenfläche in startpoint_main.
 startpunkt wird von allen box_canvas.offset's subtrahiert
\end_layout

\begin_layout Subsection
undo/redo (undoable)
\end_layout

\begin_layout Itemize
bei draw werden sich alle punkte x,y gespeichrt, wenn vorher gezeichneter
 punkt gelöscht wird, werden alle dazugehörigen pixel auf den Boxen und
 der Zeichenfläche gespeichert zusätzlich wird der anfangsstatus gespeichet
 mit overide, autofill, countinue_draw und anfangs überquerten kanten auf
 den Boxen bei undo werden alle diese punkte mit drawing_canvas.erase gelöscht
 und in der redoliste gespeichert anschließend werden die durch diese gelöschten
 pixel vorher überschriebenen pixel wiederhergestellt
\end_layout

\begin_layout Itemize
bei redo wird ein erneutes zeichnen auf der zeichenfläche mit hilfe von
 my_event simuliert
\end_layout

\begin_layout Subsection
Speichern/Laden (save_load)
\end_layout

\begin_layout Itemize
eine modifzierte Undo-Liste wird abgespeichert als CommonUnfoldFile [*.cuf]
\end_layout

\begin_layout Subsection
CommonUnfoldFile:
\end_layout

\begin_layout Itemize
int: Anzahl der Boxen Quadtrupel für jede box: (höhe,breite,tiefe,rotation)
 tupel für jede box: boxstartpunkt(x,y) tupel: Zeichenflächenstartpunkt
 (x,y) int: Anzahl der gezeichneten Linien (Linie endet nach Mausrelease)
 für jede linie:{ int: anzahl der Pixel Boolean: war overwrite aktiv Boolean:
 war autofill aktiv Boolean: war continu line aktiv Liste von Kanten für
 jede Box als Start boxes.traversed tripel für jeden Pixel der linie: (x,
 y, farbe) }
\end_layout

\begin_layout Itemize
beim laden werden erst die boxen erstellt, dann die startpunkte gesetzt
 und dann das zeichnen simuliert
\end_layout

\begin_layout Subsection
cursor auf den anderen zeichenflächen anzeigen (cursors)
\end_layout

\begin_layout Itemize
bind von motion auf der Zeichenfläche und den Boxen auf der zeichenfläche:
 kreuz auf der box mit offset erstellen auf einer box: eigen offset von
 aktueller position abziehen und auf zeichenfläche kreuz erstellen, dann
 für alle anderen boxen mit methode von zeichenfläche kreuze berechnen
\end_layout

\begin_layout Subsection
zeichnen auf den Boxen (draw_from_box)
\end_layout

\begin_layout Itemize
rechnet position auf zeichenfläche aus und ruft mit dieser die standart
 drawfunktion auf
\end_layout

\begin_layout Subsection
zeichendicke und form (choose_shape, control_panel, draw_with, drawing_canvas.wid
th_draw)
\end_layout

\begin_layout Itemize
für jeden pixel der fläche wird draw aufgerufen
\end_layout

\begin_layout Subsection
Generierung der Schachteln und Preview
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Rotation und Grid
\end_layout

\begin_layout Chapter
Projektmanagement und Teamarbeit
\end_layout

\begin_layout Standard
Im folgenden Teil des Projektberichtes werde ich auf die Zusammenarbeit
 im Team eingehen, Schwierigkeien und Herausforderungen erläutern.
\end_layout

\begin_layout Section
Teammitglieder
\end_layout

\begin_layout Standard
Zu Beginn des Projektes waren wir 4 Teammitglieder: Alexa, Friedrich, Henry
 und Michael.
 Kurz vor Ende des Semesters ist unser Teamkollege Michael abgesprungen.
 Wir kannten uns alle nicht, hatten unterschiedliche Vorerfahrungen, bevorzugten
 verschiedene Programmiersprachen.
 Die Vorraussetzungen erschwerten zu Beginn die Aufgabenverteilung, bzw.
 die Einschätzung der Zuverlässigkeit.
\end_layout

\begin_layout Section
Projektmanagemant
\end_layout

\begin_layout Standard
Wir haben uns für das Hosting des Projektes bei Spline[Quelle wo ist das
 Projekt] entschieden.
 Zur Codeversionierung wird dabei SVN verwendet Es wird zusätzlich ein Bug-Trace
r [wo] zur Verfügung gestellt.
 
\end_layout

\begin_layout Standard
Bei regelmäßigen, wöchentlichen Treffen haben wir über neue Aufgaben gesprochen,
 welche wir als Ticket im Trac eingetragen haben.
 Anschließend haben wir besprochen, wer welche Aufgabe(n) in der folgenden
 Woche übernimmt.
 Jeder der Fehler entdeckt, sollte diese auch als Ticket im bugtracker eintragen.
 Sodass schnell Fehler behoben werden können.
\end_layout

\begin_layout Section
Aufgabenverteilung
\end_layout

\begin_layout Chapter
Zusammenfassung
\end_layout

\begin_layout Section
Ergebnisse
\end_layout

\begin_layout Section
Ausblick
\end_layout

\begin_layout Itemize
Ausblick (was könnten wir noch machen, welche features brauchen wir noch,
 damit das Programm noch besser wird)
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "verweiseCU"
options "bibtotoc,/home/alexa/Dokumente/din1505/alphadin"

\end_inset


\end_layout

\end_body
\end_document
